#!/usr/bin/env python2.7

from avoidlib import Topology, TopologyEvents
import sys, os, time

class CliView(TopologyEvents):
    def __init__(self, topo):
        self.topo = topo
        topo.callbacks.append(self)
        self.beginTime = time.time()
        self.end = False
    
    def onRedeployStarted(self):
        print "Respawning instances..."
        self.spawnBeginTime = time.time()

    def onInstanceDeleted(self, instance):
        print "%s deleted"%instance.name

    def onInstanceCreated(self, instance):
        print "%s created, waiting for ready"%instance.name

    def onInstanceActive(self, instance):
        print "%s active -> %s"%(instance.name, instance.getIPAddress())

    def onInstanceReady(self, instance):
        print "%s ready"%(instance.name)

    def onAllInstancesReady(self):
        print "VMs ready in %i seconds"%(time.time() - self.spawnBeginTime)

    def onInventoryGenerated(self):
        print "Ansible inventory generated"

    def onAllPlaybooksStarted(self):
        print "Starting playing playbooks..."
        self.playbookBeginTime = time.time()

    def onPlaybookUpdated(self, playbook):
        CURSOR_UP_ONE = '\x1b[1A'
        ERASE_LINE = '\x1b[2K'
        # Clear display
        print((CURSOR_UP_ONE + ERASE_LINE)*(len(self.topo.playbooks_to_play) + 1))
        # Display
        for pb in self.topo.playbooks_to_play:
            if pb.status != "Running":
                label = pb.status
            else:
                if pb.current_task == 0:
                    label = "Waiting"
                else:
                    label = pb.tasks[pb.current_task-1]
            progress = "." * (pb.current_task*20/len(pb.tasks))
            print "%s [%s] %i/%i %s"%(pb.name.ljust(25), progress.ljust(20), pb.current_task, len(pb.tasks), label)
        sys.stdout.flush()

    def onAllPlaybooksCompleted(self):
        print "VMs configured with ansible in %i seconds"%(time.time() - self.playbookBeginTime)
        self.exit(True)

    def onPlaybookError(self, playbook):
        print playbook.console_output
        print "Error during configuration with ansible"
        self.exit(False)

    def exit(self, success):
        if success:
            self.status = "OK"
        else:
            self.status = "ERROR"
        print "--- %s ---"%self.status
        print "Total time: %i seconds"%(time.time() - self.beginTime)
        self.end = True

if __name__ == '__main__':
    args = list(sys.argv)
    verbose = False
    if "-v" in args:
        verbose = True
        args.remove("-v")

    # Check argument
    if len(args) < 3 or not os.path.isfile(args[1]):
        print "Usage %s: <topology_file.yml> <command> [opts]"
        print "  where <command> is:"
        print "   - status: list topology status"
        print "   - redeploy <list of playbooks or VM names>: terminate VM, spawn a new one and restart playbook"
        print "   - redeployall: redeploy all nodes"
        print "   - runplaybook <list of playbooks>: restart playbook as it"
        print "   - runallplaybooks: restart all playbooks"
        print "   - geninventory: generate Ansible inventory file based on topology.yml"
        sys.exit(1)
    
    t = Topology(args[1], verbose)
    print "Read of %s done: %i VMs and %i playbooks"%(args[1], len(t.instances), len(t.playbooks))
    cmd = args[2]
    params = []
    if len(args) > 3:
        params = args[3:]

    if cmd == "status":
        print "WARNING: status is OK when VM is ACTIVE in Openstack i.e. it can be not started or not configured"
        for instance in t.instances:
            status = instance.status
            ip = instance.getIPAddress()
            if ip:
                status = status + " [%s]"%ip.center(15)
            if instance.static:
                status = status + " [static]"
            print "%s%s"%(instance.name.ljust(30), status)
        sys.exit(0)
    elif cmd == "redeploy":
        if len(params):
            for name in params:
                t.addToRedeploy(name)
        else:
            print "Usage %s: <topology_file.yml> redeploy <instance_name/playbook_name> [<instance_name/playbook_name>]"
            sys.exit(1)

    elif cmd == "redeployall":
        for i in t.instances:
            if not i.static:
                t.addToRedeploy(i.name)

    elif cmd == "runplaybook":
        if len(params):
            for name in params:
                t.addToReconfigure(name)
        else:
            print "Usage %s: <topology_file.yml> runplaybook <playbook_name> [<playbook_name>]"
            sys.exit(1)
                                
    elif cmd == "runallplaybooks":
        for pb in t.playbooks:
            if pb.status != "Not playable":
                self.addToReconfigure(pb.name)

    elif cmd == "geninventory":
        t.generateAnsibleInventory()

    print "%i instances to recreate and %i playbooks to play"%(len(t.instances_to_redeploy), len(t.playbooks_to_play))
    v = CliView(t)
    t.run()
    while not v.end:
        time.sleep(1)
    if v.status == "ERROR":
        sys.exit(1)
